#include <vector>
#include <fstream>
#include <sstream>

using namespace std;

#define api

struct hedr_t
{
	char id[4];
	unsigned long ver, offset, archive_flags, folders, files, foldersl, filesl, file_flags;
	//unsigned long ver, offset, flags, fos, fis, fol, fil, fflags;
};

struct fld_t
{
	unsigned long long hash;
	unsigned long num, offset;
};

struct fle_t
{
	unsigned long long nameHash;
	unsigned long size, offset;
};

struct rc_t
{
	int i, j, r;
	fld_t *a;
	fle_t *b;
	const char *name, *path;
};

struct bsa_t
{
	hedr_t hdr;
	ifstream is;
	fld_t *fld;
	fle_t **fle;
	rc_t **rc;
	int *r;
	const char **ca;
	const char **cb;
};

api bsa_t bsa_load(const string &);
void bsa_read_folder_records(bsa_t &);
void bsa_read_file_records(bsa_t &);
void bsa_read_filenames(bsa_t &);

void bsa_resources(bsa_t &);
void bsa_sort(bsa_t &);

char *bsa_path(bsa_t &, int, int);
char *bsa_read_bzstring(bsa_t &);

void bsa_test();
void bsa_gui();
void bsa_print(bsa_t &);
void bsa_print_hedr(bsa_t &, stringstream &);
void bsa_print_fld_rcd(bsa_t &, stringstream &, int);
void bsa_print_file_rcd(bsa_t &, stringstream &, int, int);

api rc_t *bsa_find(bsa_t &, const char *);
api const unsigned char *bsa_read(bsa_t &, rc_t *);
